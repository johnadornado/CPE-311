import requests
from tabulate import tabulate


class Node(object):
    def __init__(self, name):
        """Assumes name is a string"""
        self.name = name

    def getName(self):
        return self.name

    def __str__(self):
        return self.name


class Edge(object):
    def __init__(self, src, dest, distance):
        """Assumes src and dest are nodes"""
        self.src = src
        self.dest = dest
        self.distance = distance

    def getSource(self):
        return self.src

    def getDestination(self):
        return self.dest

    def getDistance(self):
        return self.distance

    def __str__(self):
        return self.src.getName() + '->' + self.dest.getName()


class Digraph(object):
    """edges is a dict mapping each node to a list of
    its children"""

    def __init__(self):
        self.edges = {}

    def addNode(self, node):
        if node in self.edges:
            raise ValueError('Duplicate node')
        else:
            self.edges[node] = []

    def addEdge(self, edge):
        src = edge.getSource()
        dest = edge.getDestination()
        if not (src in self.edges and dest in self.edges):
            raise ValueError('Node not in graph')
        self.edges[src].append(edge)

    def childrenOf(self, node):
        return self.edges[node]

    def getNode(self, name):
        for n in self.edges:
            if n.getName() == name:
                return n
        raise NameError(name)

    def __str__(self):
        result = ''
        for src in self.edges:
            for dest in self.edges[src]:
                result = result + src.getName() + '->' \
                         + dest.getName() + '\n'
        return result[:-1]  # omit final newline


def buildCityGraph(graphType, citynames, cityconnections):
    g = graphType()

    # Create nodes for cities
    for name in citynames:
        g.addNode(Node(name))

    # Add edges for city connections
    for connection in cityconnections:
        city1, city2, distance = connection
        g.addEdge(Edge(g.getNode(city1), g.getNode(city2), distance))

    return g


def printPath(path):
    """Assumes path is a list of nodes"""
    result = ''
    for i in range(len(path)):
        result = result + str(path[i])
        if i != len(path) - 1:
            result = result + '->'
    return result
meow = []
def DFS(graph, start, end, path, shortest, total_distance, toPrint=False):
    """Assumes graph is a Digraph; start and end are nodes;
          path and shortest are lists of nodes
       Returns a shortest path from start to end in graph"""
    path = path + [start]
    if toPrint:
        print('Current DFS path:', printPath(path))
    if start == end:
        return path, total_distance
    for edge in graph.childrenOf(start):
        node = edge.getDestination()
        if node not in path:  # avoid cycles
            new_total_distance = total_distance + edge.getDistance()
            if shortest is None or new_total_distance < shortest[1]:
                newPath, shortest = DFS(graph, node, end, path, shortest, new_total_distance, toPrint)
                if newPath is not None:
                    meow.append(new_total_distance)
                    shortest = newPath, new_total_distance
    if shortest is None:
        return None
    else:
        return shortest


def shortestPath(graph, start, end, toPrint=False):
    """Assumes graph is a Digraph; start and end are nodes
       Returns a shortest path from start to end in graph"""
    return DFS(graph, start, end, [], None, 0, toPrint)


def testSP(source, destination):
    # Define city names, connections, and distances
    city_connections = [('Naga', 'Pili', 23), ('Naga', 'Minalabac', 16), ('Minalabac', 'Bula', 21),
                        ('Bula', 'Nabua', 15),
                        ('Nabua', 'Balatan', 16), ('Nabua', 'City of iriga', 11), ('Nabua', 'Bato', 8),
                        ('Nabua', 'Polangui', 32),
                        ('Pili', 'Baao', 28), ('Ocampo', 'City of iriga', 35), ('Ocampo', 'Buhi', 35),
                        ('Ocampo', 'Tigaon', 17),
                        ('Tigaon', 'Sagnay', 12), ('Sagnay', 'Tiwi', 43), ('Tiwi', 'Malilipot', 22),
                        ('Malilipot', 'Tabaco city', 16), ('Legazpi city', 'Guinobatan', 19),
                        ('Malilipot', 'Legazpi city', 22),
                        ('Guinobatan', 'Ligao', 10), ('Ligao', 'Malama', 18), ('Ligao', 'Tabaco city', 17),
                        ('Ligao', 'Polangui', 17),
                        ('Pili', 'Ocampo', 21), ('Pili', 'Baao', 27), ('Baao', 'Nabua', 19), ('Pili', 'Bula', 16),
                        ('Ocampo', 'Tigaon', 17),
                        ('Buhi', 'Polangui', 16), ('Bato', 'Libon', 16), ('Libon', 'Polangui', 24),
                        ('Libon', 'Pantao', 20),
                        ('Pantao', 'Rawis', 7),
                        ]

    for connection in city_connections[:]:
        reversed_connection = (connection[1], connection[0], connection[2])
        city_connections.append(reversed_connection)

    g = buildCityGraph(Digraph, city_names, city_connections)
    shortest_path, total_distance = shortestPath(g, g.getNode(source), g.getNode(destination), toPrint=True)
    route = printPath(shortest_path)
    if shortest_path is not None:
        print('Shortest path from', source, 'to', destination, 'is', route)
        print('Total distance:', max(meow), 'km')
        weathering(route.split('->'))
    else:
        print('There is no path from', source, 'to', destination)


def weathering(weather):
    tablee = []
    headersss = ['Location', 'Weather', 'Temperature', 'Wind Speed']
    for i in weather:
        weather_dataa = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={i + ', PH'}&units=imperial&APPID={api_key}")

        if weather_dataa.json()['cod'] == '404':
            print("No City Found")
        else:
            weatherss = weather_dataa.json()['weather'][0]['description']
            tempp = round(weather_dataa.json()['main']['temp'])
            speedd = weather_dataa.json()['wind']['speed']
            tablee.append([(i + ", Bicol"), weatherss, tempp, speedd])
    print(tabulate(tablee, headers=headersss, tablefmt="fancy_grid", showindex="always"))
    meow = {'clear sky': 0, 'few clouds': 0, 'scattered clouds': 0, 'broken clouds': 0,
            'shower rain': 0, 'rain': 0, 'thunderstorm': 0, 'snow': 0, 'mist': 0}
    for i in table:
        meow[i[1]] += int(table[1].count(f'{i[1]}'))
    maxx = max(meow, key=meow.get)
    per = (meow[maxx]/len(weather)) * 100
    print(f"\n#### Majority of the route is {maxx.capitalize()} with {per}% out of {len(weather)} ####")


api_key = '30d4741c779ba94c470ca1f63045390a'
city_names = ['Naga', 'Pili', 'Ocampo', 'Tigaon', 'Sagnay', 'Minalabac', 'Bula', 'Baao', 'Tiwi', 'Buhi',
              'City of iriga', 'Nabua', 'Balatan', 'Bato', 'Libon', 'Pantao', 'Rawis', 'Polangui', 'Ligao',
              'Malama', 'Tabaco city', 'Guinobatan', 'Legazpi city', 'Malilipot']

names = [city_names[i:i + 8] for i in range(0, len(city_names), 8)]
print(tabulate(names, tablefmt="fancy_grid"))
print("A : City weather report\t B : Route Weather report")
answer = input('Choice: ')
if answer.upper() == 'A':
    loc = input("Enter the City name: ").capitalize()
    table = []
    headerss = ['Location', 'Weather', 'Temperature', 'Wind Speed']
    weather_data = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={loc + ', PH'}&units=imperial&APPID={api_key}")
    if weather_data.json()['cod'] == '404':
        print("No City Found")
    else:
        weathers = weather_data.json()['weather'][0]['description']
        temp = round(weather_data.json()['main']['temp'])
        speed = weather_data.json()['wind']['speed']
        table.append([(loc + ", Bicol"), weathers, (str(temp) + 'Â°F'), str(speed) + 'kph'])
    print(tabulate(table, headers=headerss, tablefmt="fancy_grid", showindex="always"))
elif answer.upper() == 'B':
    start = input("Starting point: ").capitalize()
    if start not in city_names:
        raise ValueError('City not in Locations')
    end = input("Destination: ").capitalize()
    if end not in city_names:
        raise ValueError('City not in Locations end')
    else:
        print(start, end)
        testSP(start, end)
else:
    raise ValueError('Do not exist nibba')

